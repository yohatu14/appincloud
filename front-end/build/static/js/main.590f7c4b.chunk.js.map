{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleClickShowMessage","event","listamitemp","state","list","push","message","from","setState","showMessage","messageEnd","scrollIntoView","behavior","console","log","fetch","method","body","JSON","stringify","headers","then","response","json","data","success","text","handleChange","prop","target","value","user","humanlist","messa","this","attach","style","height","overflow","List","slice","map","m","ListItem","Grid","container","direction","justify","Card","backgroundColor","maxWidth","borderRadius","padding","color","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","Typography","className","float","clear","ref","el","width","position","CardContent","TextField","type","id","variant","fullWidth","label","onChange","InputProps","endAdornment","InputAdornment","onKeyDown","handleKey","IconButton","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAOC,QAAU,IAA0B,kC,kSC+J5BC,E,YA7Ib,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,uBAAyB,SAACC,GACxB,IAAIC,EAAc,EAAKC,MAAMC,KAC7BF,EAAYG,KAAK,CAAEC,QAAS,EAAKH,MAAMG,QAASC,MAAM,IACtD,EAAKC,SAAS,CAAEJ,KAAMF,EAAaI,QAAS,GAAIG,aAAa,IAAS,kBAAM,EAAKC,WAAWC,eAAe,CAAEC,SAAU,cACvHC,QAAQC,IAAI,yBAAyB,EAAKX,MAAMG,SAChDS,MAAM,6CAA8C,CAClDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBb,QAAS,EAAKH,MAAMG,UAEtBc,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,EAAKC,UACPvB,EAAYG,KAAK,CAAEC,QAASkB,EAAKE,KAAKA,KAAMnB,MAAM,IAClD,EAAKC,SAAS,CAAEJ,KAAMF,EAAaO,aAAa,IAAO,kBAAM,EAAKC,WAAWC,eAAe,CAAEC,SAAU,kBAG5G,EAAKF,WAAWC,eAAe,CAAEC,SAAU,YApC5B,EAuCnBe,aAAe,SAAAC,GAAI,OAAI,SAAA3B,GACrB,EAAKO,SAAL,eAAiBoB,EAAO3B,EAAM4B,OAAOC,UAtCrC,EAAK3B,MAAQ,CACXM,aAAa,EACbH,QAAS,GACTyB,KAAM,GACN3B,KAAM,GACN4B,UAAW,GACXC,MAAO,GAET,EAAKvB,WAAa,GAVD,E,sEA2CT,IAAD,SACyBwB,KAAK/B,MAA7BC,EADD,EACCA,KAAM6B,EADP,EACOA,MADP,EACcE,OACrB,OACE,6BACA,6BACA,yBAAKC,MAAO,CAAEC,OAAQ,IAAKC,SAAU,SAEnC,kBAACC,EAAA,EAAD,KACGnC,EAAKoC,MAAMP,GAAOQ,KAAI,SAAAC,GACrB,OACE,6BACGA,EAAEnC,MACD,kBAACoC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,QAAQ,cACvC,6BACE,kBAACC,EAAA,EAAD,CAAMZ,MAAO,CAAEa,gBAAiB,UAAWC,SAAU,IAAKC,aAAc,GAAIC,QAAS,GAAIC,MAAO,UAC9F,kBAACV,EAAA,EAAD,CAAUW,WAAW,cACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAI,yFAE/B,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAYzB,MAAO,CAAEiB,MAAO,UAAYX,EAAEpC,iBAS/DoC,EAAEnC,MACF,kBAACoC,EAAA,EAAD,CAAUW,WAAW,cACnB,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,YACtC,6BACE,kBAACC,EAAA,EAAD,CAAMZ,MAAO,CAAEa,gBAAiB,UAAWC,SAAU,IAAKC,aAAc,GAAIC,QAAS,GAAIC,MAAO,UAC9F,kBAACV,EAAA,EAAD,CAAUW,WAAW,cACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAI,6DAE/B,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAYzB,MAAO,CAAEiB,MAAO,UAAYX,EAAEpC,oBAWvE,6BACE,yBAAKwD,UAAU,oBACb,yBAAKA,UAAU,iBAGf,yBAAK1B,MAAO,CAAE2B,MAAO,OAAQC,MAAO,QAClCC,IAAK,SAACC,GAAS,EAAKxD,WAAawD,SAO3C,yBAAK9B,MAAO,CAAE+B,MAAO,SAEnB,kBAACnB,EAAA,EAAD,CAAMoB,SAAS,OAEb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,GAAG,sBACHC,QAAQ,SACRC,WAAS,EACTC,MAAM,UACN7C,MAAOI,KAAK/B,MAAMG,QAClBsE,SAAU1C,KAAKP,aAAa,WAC5BkD,WAAY,CACVC,aACE,kBAACC,EAAA,EAAD,CAAgBC,UAAW9C,KAAK+C,UAAWR,QAAQ,SAASL,SAAS,OACnE,kBAACc,EAAA,EAAD,CACEC,QAASjD,KAAKlC,wBAEbkC,KAAK/B,MAAMM,YAAc,kBAAC,IAAD,MAAW,kB,GA/H3C2E,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,MAAK,SAAA4E,GACjCA,EAAaC,kB","file":"static/js/main.590f7c4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Send from '@material-ui/icons/Send';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Grid, Icon } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMessage: true,\n      message: \"\",\n      user: \"\",\n      list: [],\n      humanlist: [],\n      messa: 0,\n    };\n    this.messageEnd = \"\";\n\n  }\n\n\n  handleClickShowMessage = (event) => {\n    var listamitemp = this.state.list\n    listamitemp.push({ message: this.state.message, from: false })\n    this.setState({ list: listamitemp, message: \"\", showMessage: false }, () => this.messageEnd.scrollIntoView({ behavior: \"smooth\" }))\n    console.log(\"handleClickShowMessage\",this.state.message )\n    fetch('https://myappenlanube.mybluemix.net/listen', {\n      method: 'post',\n      body: JSON.stringify({\n        message: this.state.message\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.success) {\n          listamitemp.push({ message: data.text.text, from: true })\n          this.setState({ list: listamitemp, showMessage: true },() => this.messageEnd.scrollIntoView({ behavior: \"smooth\" }));\n        }\n      });\n      this.messageEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  handleChange = prop => event => {\n    this.setState({ [prop]: event.target.value });\n  };\n\n  render() {\n    const { list, messa, attach } = this.state;\n    return (\n      <div>\n      <br></br>\n      <div style={{ height: 475, overflow: \"auto\" }}>\n\n        <List>\n          {list.slice(messa).map(m => {\n            return (\n              <div>\n                {m.from &&\n                  <ListItem >\n                    <Grid container direction=\"row \" justify=\"flex-start\">\n                      <div  >\n                        <Card style={{ backgroundColor: \"#76c1c7\", maxWidth: 400, borderRadius: 15, padding: 10, color: \"white\" }}>\n                          <ListItem alignItems=\"flex-start\">\n                            <ListItemAvatar>\n                              <Avatar alt=\"Remy Sharp\" src=\"https://www.pratechgroup.com/wp-content/themes/pratech/img/products/parly/icono.png\" />\n                            </ListItemAvatar>\n                            <ListItemText\n                              primary={<Typography style={{ color: \"white\" }}>{m.message}</Typography>}\n                            />\n                          </ListItem>\n                        </Card>\n\n                      </div>\n                    </Grid>\n                  </ListItem>\n                }\n                {!m.from &&\n                  <ListItem alignItems=\"flex-start\" >\n                    <Grid container direction=\"row\" justify=\"flex-end\">\n                      <div>\n                        <Card style={{ backgroundColor: \"#bac0bc\", maxWidth: 400, borderRadius: 15, padding: 10, color: \"white\" }}>\n                          <ListItem alignItems=\"flex-start\">\n                            <ListItemAvatar>\n                              <Avatar alt=\"Remy Sharp\" src=\"https://png.pngtree.com/svg/20160421/personal_68980.png\" />\n                            </ListItemAvatar>\n                            <ListItemText\n                              primary={<Typography style={{ color: \"white\" }}>{m.message}</Typography>}\n                            />\n                          </ListItem>\n                        </Card>\n                      </div>\n                    </Grid>\n                  </ListItem>\n                }\n              </div>\n            );\n          })}\n          <div>\n            <div className=\"MessageContainer\">\n              <div className=\"MessagesList\">\n\n              </div>\n              <div style={{ float: \"left\", clear: \"both\" }}\n                ref={(el) => { this.messageEnd = el; }}>\n              </div>\n            </div>\n          </div>\n        </List>\n\n      </div>\n      <div style={{ width: \"100%\" }}>\n\n        <Card position=\"end\">\n\n          <CardContent >\n              <TextField\n                type='text'\n                id=\"standard-full-width\"\n                variant=\"filled\"\n                fullWidth\n                label=\"Message\"\n                value={this.state.message}\n                onChange={this.handleChange('message')}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment onKeyDown={this.handleKey} variant=\"filled\" position=\"end\">\n                      <IconButton\n                        onClick={this.handleClickShowMessage}\n                      >\n                        {this.state.showMessage ? <Send /> : null}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}